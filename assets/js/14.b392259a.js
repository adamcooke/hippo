(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{212:function(e,a,n){"use strict";n.r(a);var s=n(28),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"preparing-the-cluster"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#preparing-the-cluster"}},[e._v("#")]),e._v(" Preparing the cluster")]),e._v(" "),n("p",[e._v("Once you have created your stage and added your initial configuration, you can go ahead and prepare to deploy your application.")]),e._v(" "),n("h2",{attrs:{id:"what-does-prepration-do"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#what-does-prepration-do"}},[e._v("#")]),e._v(" What does prepration do?")]),e._v(" "),n("p",[e._v("To prepare for the arrival of your new stage, there may be things that need to be performed on the Kubernetes cluster.")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("It will push any configuration objects that have been defined in the application's manifest (including your own configuration variables as needed).")])]),e._v(" "),n("li",[n("p",[e._v("Install any dependencies from Helm that are needed (also including your own confiuration). For example, if your application needs a MySQL database server, this will be installed and configured ready for use.")])])]),e._v(" "),n("h2",{attrs:{id:"preparing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#preparing"}},[e._v("#")]),e._v(" Preparing")]),e._v(" "),n("p",[e._v("To prepare, you just need to run the command as shown below:")]),e._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("hippo "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stage-name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" prepare\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Applying 1 namespace object")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Updating manifest from https://github.com/postalhq/k8s-hippo... done")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ====> namespace/postal-demo unchanged")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Downloading secret encryiption key... done")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Applying 1 configuration object")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ====> secret/postal-config created")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Installing rabbitmq using Helm...")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Installing mariadb using Helm...")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Finished with 2 packages")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("If the application has dependencies, you'll now need to wait for them to be fully installed and then be ready for use. "),n("strong",[e._v("Do not continue with application deployment until all dependencies are ready.")])]),e._v(" "),n("h2",{attrs:{id:"checking-dependency-status"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#checking-dependency-status"}},[e._v("#")]),e._v(" Checking dependency status")]),e._v(" "),n("p",[e._v("The status command will output the state of your namespace. This is what you should use to determine when your dependencies are ready.")]),e._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("hippo "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stage-name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" status\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("In this, you're looking for any "),n("code",[e._v("pods")]),e._v(", "),n("code",[e._v("statefulsets")]),e._v(" and "),n("code",[e._v("deployments")]),e._v(" to all be showing "),n("code",[e._v("Running")]),e._v(" and 100% readiness (i.e. 1/1 or 2/2 etc...). This is an example of what you're looking for:")]),e._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("NAME             READY   STATUS    RESTARTS   AGE\npod/mariadb-0    2/2     Running   0          50s\npod/rabbitmq-0   2/2     Running   0          53s\n\nNAME                        READY   AGE\nstatefulset.apps/mariadb    1/1     98s\nstatefulset.apps/rabbitmq   1/1     101s\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);